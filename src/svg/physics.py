#!/usr/bin/env python

import sys
import os.path
import argparse

from parser import SVGParser

parser = argparse.ArgumentParser(description=
  'Build a TypeScript file describing the vertices of simulated physical bodies. '+
  'Add bodies by making a group with a pixel-aligned rectangle whose center is '+
  'the part\'s origin, paths to define the body vertices '+
  '(must be convex, curves are ignored) '+
  'and a text element to define the class name (with "~" prepended to it). '+
  'Circles can be used to create rotation stops.')
parser.add_argument('svg', type=str,
                    help='the SVG file to take as input')
parser.add_argument('ts', type=str, 
                    help='the file to write the code to')
args = parser.parse_args()

parser = SVGParser(args.svg)

toPixels = parser.getTransformToPixels()
groups = parser.getGroupsLabeledWithPrefix('~', ctm=toPixels)

# get the rectangle in the list with the maximum area
def largestRect(rects):
  if (not (len(rects) > 0)):
    return(None)
  largest = rects[0]
  for rect in rects:
    if ((rect['w'] * rect['h']) > (largest['w'] * largest['h'])):
      largest = rect
  return(largest)

# sort groups by name for cleaner diffs
groups.sort(key=lambda g: g[0])

bodies = list()
pins = list()
for (name, group, ctm) in groups:
  # get the bounding box
  rects = parser.getRectsInGroup(group, ctm)
  rect = largestRect(rects)
  if (rect is None):
    print('ERROR: no bounding box found for group labelled %s' % name)
    sys.exit(1)
  cx = (round(rect['x']) + round(rect['x'] + rect['w'])) / 2
  cy = (round(rect['y']) + round(rect['y'] + rect['h'])) / 2
  # get circles
  circles = parser.getCirclesInGroup(group, ctm)
  if (len(circles) > 0):
    circles = [ (c['x'] - cx, c['y'] - cy, c['r']) for c in circles ]
    pins.append((name, circles))
  # get paths
  paths = parser.getPathsInGroup(group, ctm)
  # offset path points from the center point
  finalPaths = list()
  for path in paths:
    finalPaths.append([ (p[0] - cx, p[1] - cy) for p in path ])
  bodies.append((name, finalPaths))

# format bodies as code
code = '''
// WARNING: this file is autogenerated from %s
//  (any changes you make will be overwritten)

import { Vector } from 'matter-js';

export type PinLocation = { x:number, y:number, r:number };

export function getVertexSets(name:string):Vector[][] {
  switch (name) {
''' % args.svg
for (name, body) in bodies:
  parts = list()
  for vertices in body:
    parts.append('['+(','.join([ '{x:%f,y:%f}' % p for p in vertices ])+']'))
  code += '''    case '%s':\n''' % name
  code += '''      return([%s]);\n''' % (','.join(parts))
code += '''    default: 
      return(null);
  }
}

export function getPinLocations(name:string):PinLocation[] {
  switch (name) {
'''
for (name, circles) in pins:
  ret = ','.join([ '{x:%f,y:%f,r:%f}' % c for c in circles ])
  code += '''    case '%s':\n''' % name
  code += '''      return([%s]);\n''' % ret
code += '''    default:
      return(null);
  }
}

'''

with open(args.ts, 'w') as f:
  f.write(code)
